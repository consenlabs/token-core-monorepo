syntax = "proto3";
package api;

import "google/protobuf/any.proto";

/// Hd Store

// FUNCTION: hd_store_create(HdStoreCreateParam): WalletResult
//
// create a new hd keystore
message HdStoreCreateParam {
    string password = 1;
    string passwordHint = 2;
    string name = 3;
    string source = 4;
}

message IdentityResult {
    string identifier = 1;
    string ipfsId = 2;
}

message WalletResult {
    string id = 1;
    string name = 2;
    string source = 3;
    repeated AccountResponse accounts = 4;
    int64 createdAt = 5;
    optional IdentityResult identity = 6;
}

// FUNCTION: hd_store_import(HdStoreImportParam): WalletResult
//
// create a new hd keystore by mnemonic
message HdStoreImportParam {
    string mnemonic = 1;
    string password = 2;
    string source = 3;
    string name = 4;
    string passwordHint = 5;
    bool overwrite = 6;
}

// FUNCTION: hd_store_derive(HdStoreDeriveParam): AccountsResponse
//
// derive new accounts from a hd keystore
message KeystoreCommonDeriveParam {
    string id = 1;
    string password = 2;
    message Derivation {
        string chainType = 1;
        string path = 2;
        string network = 3;
        string segWit = 4;
        string chainId = 5;
        string curve = 6;
        string bech32Prefix = 7;
    }
    repeated Derivation derivations= 3;
}

message AccountResponse {
    string chainType = 1;
    string address = 2;
    string path = 3;
    string extendedXpubKey = 4;
}

message AccountsResponse {
    repeated AccountResponse accounts = 1;
}

// FUNCTION: hd_store_export(KeystoreCommonExportResult): KeystoreCommonExistsResult
//
// export the mnemonic from a hd keystore
message KeystoreCommonExportResult {
    string id = 1;
    KeyType type = 2;
    string value = 3;
}

// only support two types
enum KeyType {
    MNEMONIC = 0;
    PRIVATE_KEY = 1;
}

/// Private Key Store

// FUNCTION: private_key_store_import(PrivateKeyStoreImportParam): WalletResult
//
// create a new private key keystore by a private key
message PrivateKeyStoreImportParam {
    string privateKey = 1;
    string password = 2;
    string name = 3;
    string passwordHint = 4;
    bool overwrite = 5;
    string encoding = 6;
}

// FUNCTION: private_key_store_export(PrivateKeyStoreExportParam): KeystoreCommonExportResult
//
// export the private key from a private key keystore
message PrivateKeyStoreExportParam {
    string id = 1;
    string password = 2;
    string chainType = 3;
    string network = 4;
}

/// Keystore Common

// FUNCTION: keystore_common_delete(WalletKeyParam) -> Response
//
// delete the keystore

// FUNCTION: keystore_common_exists(KeystoreCommonExistsParam): KeystoreCommonExistsResult
//
// Check is there a keystore was generate by the special privateKey or mnemonic
message KeystoreCommonExistsParam {
    KeyType type = 1;
    string value = 2;
    string encoding = 3;
}

message KeystoreCommonExistsResult {
    bool isExists = 1;
    string id = 2;
}

// FUNCTION: keystore_common_accounts(KeystoreCommonAccountsParam): AccountsResponse
//
// List all accounts from the keystore
message KeystoreCommonAccountsParam{
    string id = 1;
}

/// Sign Transaction

// FUNCTION: sign_tx(SignParam)
//
// Sign transaction. This api is used for sign any chain_type, you should build the right TxInput instance and
// put it in the `input` field
message SignParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
    string chainType = 4;
    string path = 5;
    string curve = 6;
    string network = 7;
    string seg_wit = 8;
    google.protobuf.Any input = 9;
}

/// Other
// TODO: annotate following message usage


message CalcExternalAddressParam {
    string id = 1;
    string network = 2;
    string segWit = 3;
    uint32 externalIdx = 4;
}

message CalcExternalAddressResult {
    string address = 1;
    string type = 2;
    string derivedPath = 3;
}

// btc-fork
// message ExternalAddressParam {
//     string id = 1;
//     string chainType = 2;
//     uint32 externalIdx = 3;
// }

// message ExternalAddressResult {
//     string address = 1;
//     string derivedPath = 2;
//     string type = 3;
// }

// message ExternalAddressExtra {
//     string encXpub = 1;
//     message ExternalAddress {
//         string address = 1;
//         string derivedPath = 2;
//         string type = 3;
//     }
//     ExternalAddress externalAddress = 2;
// }

// message BtcForkDeriveExtraParam {
//     string network = 1;
//     string segWit = 2;
// }

// message HdStoreExtendedPublicKeyParam {
//     string id = 1;
//     string password = 2;
//     string chainType = 3;
//     string address = 4;
// }

// message HdStoreExtendedPublicKeyResponse {
//     string extendedPublicKey = 1;
// }

message PublicKeyParam {
    string id = 1;
    string chainType = 2;
    string address = 3;
}

message PublicKeyResult {
    string id = 1;
    string chainType = 2;
    string address = 3;
    string publicKey = 4;
}


// message KeystoreUpdateAccount {
//     string id = 1;
//     string password = 2;
//     string accountName = 3;
// }




message RemoveWalletsParam {
    string identifier = 1;
    string password = 2;
}

message RemoveWalletsResult {
    string identifier = 1;
}

message V3KeystoreImportInput {
    string keystore = 1;
    string password = 2;
    bool overwrite = 3;
    string name = 4;
    string chainType = 5;
    string source = 6;
}

message V3KeystoreExportInput {
    string id = 1;
    string password = 2;
}

message V3KeystoreExportOutput {
    string json = 1;
}

message EncryptDataToIpfsParam {
    string identifier = 1;
    string content = 2;
}

message EncryptDataToIpfsResult {
    string identifier = 1;
    string encrypted = 2;
}

message DecryptDataFromIpfsParam {
    string identifier = 1;
    string encrypted = 2;
}

message DecryptDataFromIpfsResult {
    string identifier = 1;
    string content = 2;
}

message SignAuthenticationMessageParam {
    uint64 accessTime = 1;
    string identifier = 2 ;
    string deviceToken = 3;
    string password = 4;
}

message SignAuthenticationMessageResult {
    uint64 accessTime = 1;
    string signature = 2;
}

message GenerateMnemonicResult {
    string mnemonic = 1;
}