syntax = "proto3";
package api;

import "google/protobuf/any.proto";

// Action Wrapper
// There is a `call_tcx_api` method in tcx which act as a endpoint like RPC. It accepts a `TcxAction` param which method field is
// the real action and param field is the real param of that method.
// When an error occurred, the `call_tcx_api` will return a `Response` which isSuccess field be false and error field is the reason
// which cause the error.
message TcxAction {
    string method = 1;
    google.protobuf.Any param = 2;
}

// A common response when error occurred.
message GeneralResult {
    bool isSuccess = 1;
    string error = 2;
}

/// Initialization

// FUNCTION: init_token_core_x(InitTokenCoreXParam)
//
// initialize tcx by passing keystore folder and xpub encryption params
message InitTokenCoreXParam {
    string fileDir = 1;
    string xpubCommonKey = 2;
    string xpubCommonIv = 3;
    bool isDebug = 4;
}

message SignHashesParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
    message DataToSign {
        string hash = 1;
        string path = 2;
        string curve = 3;
        string sigAlg = 4;
    }
    repeated DataToSign dataToSign = 4;
}

message SignHashesResult {
    repeated string signatures = 1;
}

message PublicKeyDerivation {
    string chainType = 1;
    string path = 2;
    string curve = 3;
}

message GetPublicKeysParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
    repeated PublicKeyDerivation derivations = 4;
}

message GetPublicKeysResult {
   repeated string publicKeys = 1;
}

message GetExtendedPublicKeysParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
    repeated PublicKeyDerivation derivations = 4;
}

message GetExtendedPublicKeysResult {
    repeated string extendedPublicKeys = 1;
}


//
//// FUNCTION: export_private_key(ExportPrivateKeyParam): ExportResult
////
//// export the private key from a private key keystore or a hd keystore
message ExportPrivateKeyParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
    string chainType = 4;
    string network = 5;
    string curve = 6;
    string path = 7;
}

//
//// FUNCTION: export_private_key(ExportPrivateKeyParam): ExportResult
////
//// export the private key from a private key keystore or a hd keystore
message ExportJsonParam {
    string id = 1;
    string password = 2;
    string chainType = 4;
    string path = 5;
}
//
///// Keystore Common
//
//// FUNCTION: verify_password(WalletKeyParam) -> Response
////
//// verify the password of the keystore
message WalletKeyParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
}

message ExportMnemonicParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
}

message EthBatchPersonalSignParam {
    string id = 1;
    oneof key {
        string password = 2;
        string derivedKey = 3;
    }
    repeated string data = 4;
    string path = 5;
}

message EthBatchPersonalSignResult {
    repeated string signatures = 1;
}

